#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import JobsManager
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  SubmitJobResult SubmitJob(string job_xml)'
  print '   GetJobId()'
  print '   GetTaskStateInfo(i32 job_id)'
  print '  bool TaskStarted(i32 job_id, i32 task_id)'
  print '  bool TaskFinished(i32 job_id, i32 task_id)'
  print '  bool TaskFailed(i32 job_id, i32 task_id)'
  print '  bool TaskMissed(i32 job_id, i32 task_id)'
  print '  bool TaskTimeout(i32 job_id, i32 task_id)'
  print '  bool TaskStartError(i32 job_id, i32 task_id, i32 err_num)'
  print '  bool UpdateImage(string user, string name, i32 size, bool is_update_all)'
  print '  bool CreateApp(string user, string app_name)'
  print '  i32 GetWaitJobNumByGroupName(string group)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = JobsManager.Client(protocol)
transport.open()

if cmd == 'SubmitJob':
  if len(args) != 1:
    print 'SubmitJob requires 1 args'
    sys.exit(1)
  pp.pprint(client.SubmitJob(args[0],))

elif cmd == 'GetJobId':
  if len(args) != 0:
    print 'GetJobId requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetJobId())

elif cmd == 'GetTaskStateInfo':
  if len(args) != 1:
    print 'GetTaskStateInfo requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetTaskStateInfo(eval(args[0]),))

elif cmd == 'TaskStarted':
  if len(args) != 2:
    print 'TaskStarted requires 2 args'
    sys.exit(1)
  pp.pprint(client.TaskStarted(eval(args[0]),eval(args[1]),))

elif cmd == 'TaskFinished':
  if len(args) != 2:
    print 'TaskFinished requires 2 args'
    sys.exit(1)
  pp.pprint(client.TaskFinished(eval(args[0]),eval(args[1]),))

elif cmd == 'TaskFailed':
  if len(args) != 2:
    print 'TaskFailed requires 2 args'
    sys.exit(1)
  pp.pprint(client.TaskFailed(eval(args[0]),eval(args[1]),))

elif cmd == 'TaskMissed':
  if len(args) != 2:
    print 'TaskMissed requires 2 args'
    sys.exit(1)
  pp.pprint(client.TaskMissed(eval(args[0]),eval(args[1]),))

elif cmd == 'TaskTimeout':
  if len(args) != 2:
    print 'TaskTimeout requires 2 args'
    sys.exit(1)
  pp.pprint(client.TaskTimeout(eval(args[0]),eval(args[1]),))

elif cmd == 'TaskStartError':
  if len(args) != 3:
    print 'TaskStartError requires 3 args'
    sys.exit(1)
  pp.pprint(client.TaskStartError(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'UpdateImage':
  if len(args) != 4:
    print 'UpdateImage requires 4 args'
    sys.exit(1)
  pp.pprint(client.UpdateImage(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'CreateApp':
  if len(args) != 2:
    print 'CreateApp requires 2 args'
    sys.exit(1)
  pp.pprint(client.CreateApp(args[0],args[1],))

elif cmd == 'GetWaitJobNumByGroupName':
  if len(args) != 1:
    print 'GetWaitJobNumByGroupName requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetWaitJobNumByGroupName(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
