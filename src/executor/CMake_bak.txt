SET(THRIFT_SOURCE_PREFIX ${CMAKE_SOURCE_DIR}/src/proxy)

SET(SCHEDULER_THRIFT_SOURCE
    ${THRIFT_SOURCE_PREFIX}/scheduler/gen-cpp/scheduler_constants.h 
    ${THRIFT_SOURCE_PREFIX}/scheduler/gen-cpp/scheduler_constants.cpp
    ${THRIFT_SOURCE_PREFIX}/scheduler/gen-cpp/scheduler_types.h
    ${THRIFT_SOURCE_PREFIX}/scheduler/gen-cpp/scheduler_types.cpp
    ${THRIFT_SOURCE_PREFIX}/scheduler/gen-cpp/Scheduler.h
    ${THRIFT_SOURCE_PREFIX}/scheduler/gen-cpp/Scheduler.cpp)
ADD_CUSTOM_COMMAND (
    OUTPUT ${SCHEDULER_THRIFT_SOURCE}
    COMMAND thrift --gen cpp -r -o ${CMAKE_SOURCE_DIR}/src/proxy/scheduler
    ${CMAKE_SOURCE_DIR}/src/proxy/scheduler/scheduler.thrift
)

SET(COLLECTOR_THRIFT_SOURCE
    ${THRIFT_SOURCE_PREFIX}/collector/gen-cpp/collector_constants.h
    ${THRIFT_SOURCE_PREFIX}/collector/gen-cpp/collector_constants.cpp
    ${THRIFT_SOURCE_PREFIX}/collector/gen-cpp/collector_types.h
    ${THRIFT_SOURCE_PREFIX}/collector/gen-cpp/collector_types.cpp
    ${THRIFT_SOURCE_PREFIX}/collector/gen-cpp/Collector.h
    ${THRIFT_SOURCE_PREFIX}/collector/gen-cpp/Collector.cpp)
ADD_CUSTOM_COMMAND (
    OUTPUT ${COLLECTOR_THRIFT_SOURCE}
    COMMAND thrift --gen cpp -r -o ${CMAKE_SOURCE_DIR}/src/proxy/collector
    ${CMAKE_SOURCE_DIR}/src/proxy/collector/collector.thrift
)

SET(EXECUTOR_THRIFT_SOURCE
    ${THRIFT_SOURCE_PREFIX}/executor/gen-cpp/executor_constants.h
    ${THRIFT_SOURCE_PREFIX}/executor/gen-cpp/executor_constants.cpp
    ${THRIFT_SOURCE_PREFIX}/executor/gen-cpp/executor_types.h
    ${THRIFT_SOURCE_PREFIX}/executor/gen-cpp/executor_types.cpp
    ${THRIFT_SOURCE_PREFIX}/executor/gen-cpp/Executor.h
    ${THRIFT_SOURCE_PREFIX}/executor/gen-cpp/Executor.cpp)
ADD_CUSTOM_COMMAND (
    OUTPUT ${EXECUTOR_THRIFT_SOURCE}
    COMMAND thrift --gen cpp -r -o ${CMAKE_SOURCE_DIR}/src/proxy/executor
    ${CMAKE_SOURCE_DIR}/src/proxy/executor/executor.thrift
    COMMAND thrift --gen py -r -o ${CMAKE_SOURCE_DIR}/src/proxy/executor
    ${CMAKE_SOURCE_DIR}/src/proxy/executor/executor.thrift
)

SET(VMWORKER_THRIFT_SOURCE
    ${THRIFT_SOURCE_PREFIX}/vm_worker/gen-cpp/vm_worker_constants.h
    ${THRIFT_SOURCE_PREFIX}/vm_worker/gen-cpp/vm_worker_constants.cpp
    ${THRIFT_SOURCE_PREFIX}/vm_worker/gen-cpp/vm_worker_types.h
    ${THRIFT_SOURCE_PREFIX}/vm_worker/gen-cpp/vm_worker_types.cpp
    ${THRIFT_SOURCE_PREFIX}/vm_worker/gen-cpp/VMWorker.h
    ${THRIFT_SOURCE_PREFIX}/vm_worker/gen-cpp/VMWorker.cpp)
ADD_CUSTOM_COMMAND (
    OUTPUT ${VMWORKER_THRIFT_SOURCE}
    COMMAND thrift --gen cpp -r -o ${CMAKE_SOURCE_DIR}/src/proxy/vm_worker
    ${CMAKE_SOURCE_DIR}/src/proxy/vm_worker/vm_worker.thrift
    COMMAND thrift --gen py -r -o ${CMAKE_SOURCE_DIR}/src/proxy/vm_worker
    ${CMAKE_SOURCE_DIR}/src/proxy/vm_worker/vm_worker.thrift
)

SET(COMMON_SOURCE
    ../common/clynn/cond.cpp
    ../common/clynn/thread.cpp)

## hdfs ##
# HOME
# SET(HADOOP_DIR /home/wm/work/hadoop/hadoop-1.0.4)
# SET(JAVA_HOME /usr/lib/java/jdk1.7.0_40)
# -I
include_directories($ENV{HADOOP_DIR}/src/c++/libhdfs)
include_directories($ENV{JAVA_HOME}/include)
include_directories($ENV{JAVA_HOME}/include/linux)
# -L
link_directories($ENV{HADOOP_DIR}/c++/Linux-amd64-64/lib)
link_directories($ENV{JAVA_HOME}/jre/lib/amd64/server)

SET(SRC 
    ${COMMON_SOURCE}
    ${SCHEDULER_THRIFT_SOURCE}
    ${COLLECTOR_THRIFT_SOURCE}
    ${EXECUTOR_THRIFT_SOURCE}
    ${VMWORKER_THRIFT_SOURCE}
    config.cpp
    system.cpp
    task_entity.cpp
    task_entity_pool.cpp
    vm.cpp
    kvm.cpp
    lxc.cpp
    vm_pool.cpp
    resource_manager.cpp
    event.cpp
    handler.cpp
    dispatcher.cpp
    work_thread.cpp
    service.cpp
    executor.cpp)

ADD_EXECUTABLE(executor ${SRC})
# ADD_EXECUTABLE(clean_environment clean_environment.cpp)

TARGET_LINK_LIBRARIES(executor pthread)
TARGET_LINK_LIBRARIES(executor thrift)
TARGET_LINK_LIBRARIES(executor log4cplus)
TARGET_LINK_LIBRARIES(executor gflags)
TARGET_LINK_LIBRARIES(executor classad)
TARGET_LINK_LIBRARIES(executor virt)
TARGET_LINK_LIBRARIES(executor lxc)
# hdfs
TARGET_LINK_LIBRARIES(executor hdfs)
TARGET_LINK_LIBRARIES(executor jvm)

# TARGET_LINK_LIBRARIES(clean_environment virt)

INSTALL(TARGETS executor RUNTIME DESTINATION bin)
# INSTALL(TARGETS clean_environment RUNTIME DESTINATION bin)
